on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Define release name'
        required: true
      prerelease:
        description: 'Pre-Release?'
        required: true
        default: true
      draft:
        description: 'Draft?'
        required: true
        default: true

name: Create all GUI and PyPi releases

jobs:
  Create_Draft_On_GitHub:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.draft_release.outputs.upload_url }}
    steps:
      - name: Draft Release
        id: draft_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          release_name: Release ${{ github.event.inputs.release_name }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
  Create_Linux_Release:
    runs-on: ubuntu-latest
    needs: Create_Draft_On_GitHub
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Conda info
        shell: bash -l {0}
        run: conda info
      - name: Creating installer for Linux
        shell: bash -l {0}
        run: |
          cd misc/one_click_linux
          . ./create_installer_linux.sh
      - name: Upload Linux Installer
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Create_Draft_On_GitHub.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: misc/one_click_linux/dist/alphatims_gui_installer_linux.deb
          asset_name: alphatims_gui_installer_linux.deb
          asset_content_type: application/octet-stream
  Create_MacOS_Release:
    runs-on: macos-latest
    needs: Create_Draft_On_GitHub
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Conda info
        shell: bash -l {0}
        run: conda info
      - name: Creating installer for MacOS
        shell: bash -l {0}
        run: |
          cd misc/one_click_macos
          . ./create_installer_macos.sh
      - name: Upload MacOS Installer
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Create_Draft_On_GitHub.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: misc/one_click_macos/dist/alphatims_gui_installer_macos.pkg
          asset_name: alphatims_gui_installer_macos.pkg
          asset_content_type: application/octet-stream
  Create_Windows_Release:
    runs-on: windows-latest
    needs: Create_Draft_On_GitHub
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Conda info
        shell: bash -l {0}
        run: conda info
      - name: Creating installer for Windows
        shell: bash -l {0}
        run: |
          cd misc/one_click_windows
          # . ./create_installer_windows.bat
          . ./create_installer_windows.sh
      - name: Upload Windows Installer
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Create_Draft_On_GitHub.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: misc/one_click_windows/dist/alphatims_gui_installer_windows.exe
          asset_name: alphatims_gui_installer_windows.exe
          asset_content_type: application/octet-stream
  Create_PyPi_Release:
    runs-on: macos-latest
    needs: [Create_Linux_Release, Create_MacOs_Release, Create_Windows_Release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Conda info
        shell: bash -l {0}
        run: conda info
      - name: Push release to PyPi
        shell: bash -l {0}
        run: |
          conda env create --force --name alphatims --file misc/conda_development_environment.yaml
          conda activate alphatims
          rm -rf dist
          rm -rf build
          python setup.py sdist bdist_wheel
          twine check dist/*
